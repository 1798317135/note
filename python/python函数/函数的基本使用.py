# --- def funtion(arguments):
#        pass
# 进行声明
# 
def myFun(num1,num2):
    print(num1 + num2)

# ###########################  函数参数  ###############################
# 
# ----- 形参是指函数创建时，所命名的参数
# 
# ----- 实参是指函数调用时，所传递的参数
# 
# 

# ****************** 实参 方式一  *******************
#  
# --- 按照 形参的顺序,和个数 一对一的赋值操作
myFun(1,2)

# ******************* 实参 方式二 *******************
# 
# --- 通过关键字的的形式进行赋值，
# --- 这样可以不按照形参的顺序
# 
myFun(num2 = 12,num1 = 13)

# ******************** 实参，不定长参数 ***************
# 
# --- 1.0 可以给一个形参，赋值一个可迭代对象iterable

def mynum(t):
    print(t,type(t),"iterable")

mynum([1,2,3,4])

# --- 2.0 形参用 * 号开头，表明传入的参数是一个tuple元组，实参可以不用括号,用逗号隔开
def mysun(*t):
    print(t,type(t))
    result = 0
    for x in t:
        result += x
    print(result,"*args")

mysun(4,5,6,7)

# --- 3.0 形参用 ** 号开头，表明传入的参数是一个dict字典, 注意实参一定要使用key = value的形式赋值 
def myFun1(**args):
    print(args,type(args),"**args")

myFun1(name = "yang",age = 18)

# #################################### 实参的装包 和 解包 #################################
# 
# --- 装包是指把实参包装成一个集合，称为装包
# 
def fun1(*args):
    print(args) #(1,2,3)
fun1(1,2,3)

def fun2(**args):
    print(args) #{'name': 'yang', 'age': 18}
fun2(name = "yang",age = 18)

# --- 把集合的参数，在次分解成单独的个体，称为解包
# 1.0 如果形参 用 * 那么就用 * 去解包
# 2.0 * 可以解开可迭代对象的包 ，如果是字典 解开的是key的结合
# 3.0 如果形参 用 ** 那么就用 ** 去解包 
# 4.0 如果是用 ** 装包不能用print(输入) 可以直接在另一个函数的实参里面得到拆包
# 3.0 如果形参没有装包 那么就没有解包功能
def name(name,age):
    print(name,age)

def fun3(**args):
    # 拆包
    name(**args)
fun3(name = "yang",age = 18)

# ######################################## 缺省参数 ########################################
# 
# 1.0 缺省参数是指不是必填参数
# 2.0 缺省参数可以用默认值代替
# 3.0 缺省参数为了完成主功能之外 的额外功能
# 
# ************ 缺省参数的定义 ************
# 1.0 在形参后面直接设置默认值
def hit(name = "bruce"):
    print("我想打"+name)
# --- 如果是缺省参数 调用时不给缺省参数赋值，则会去缺省参数的默认值
# --- 如果设置的值 那么设置的值会覆盖，缺省参数的默认值
hit() #bruce
hit("yang") #yang

####################################  参数的注意事项 #######################################
#
# 1.0 pyton的赋值是一个地址传递 把一个变量指向的地址给另一个变量
# 2.0 如果赋值的地址指向的内存是可 可哈希的 id的独有的 不变的，那么会重新开辟一个空间
# 并且指针指向新空间的变量
# 函数参数的赋值就是这样
def num3(num):
    print(id(num))
    # 这一步会把重新开辟一个新的空间 地址指向新的空间
    num = 666
    # 引用地址已改变
    print(id(num))
aa = 123
print(id(aa))
num3(aa)
print(id(aa))

# 3.0 如果赋值的变量是一个不能哈希的值 那么他们会指向一个内存地址
#  当内存的内容发生改变 他们指向的值都会发生改变
def hs(num):
    print(id(num))
    print(num)
    num.append(666) #还是原来的地址 当他发生改变 那么指向他变量的值都i会发生改变

arr = [1,2,3]
print(id(arr))
print(arr)
hs(arr)
print(arr) #已经发生改变

################################# 函数返回值 ######################################
#
# --- return 来返回函数最终返回的值 可以是各种类型
# # --- 函数内部 return后面的代码将不再执行
def sum(num1,num2):
    """
    计算两个数的和and连个数的差
    """
    cha = num1 + num2
    he = num1 - num2
    return (cha,he)
    print(111)
result = sum(1, 2)
print(result,"return")

