############################# 引用计数器 ######################################
#
#1.0 每个对象内部都有一个计算 引用数的机制 也就是引用计数器
#2.0 引用计数器 可以记录 对象引用的次数，也就是一共有多少指针 指向这个内存地址
#     --- 我们可以通过 sys 模块的 getrefcount 方法来查看对象被引用的次数
#          但是当我们通过这个方法查看引用次数的时候 这个方法本身是引用一次这个对象
#          所有这个对象 真实的被引用次数应该是结果-1
#     --- 当为对象创建一个引用的时候 内部的引用计数器加一 
#         当删除一个引用的时候 对象内部的引用计数器减一
#         当对象当作一个属性传递给某个 函数的时候，引用次数会加二 因为函数内部有两个方法 持有这个 对象
#          所以加二
#          
# 3.0 如果引用为0 这个对象就会被释放 这个就是内存管理机制
#     除了循环引用
# 4.0 引用计数器 是python中简单 高效的内存管理机制
#      --- 注意 但是 引用计数器 不能有效的释放 循环引用 ，会造成内存泄漏
#          也就是说容器对象内部 还引用着其他对象或者 其他容器对象内部还引种着这个对象
#          造成 引用计数器 不能释放这个内存，
# 5.0 与引用计数器同时存在的还有垃圾回收机制垃圾 回收机制可以有效的解决 引用计数器 机制 不能
#      处理的 循环引用
#           
import sys
import objgraph
class Persen:
    pass
p = Persen()
# # # --- objgraph.count("Persen") 可以查看类 一共构建了多少个实例
# # #     但是需要手动安装 objgraph 模块
# p1 = p
# print(sys.getrefcount(p))
# del p
# print(sys.getrefcount(p1))
print(objgraph.count("Persen"))
