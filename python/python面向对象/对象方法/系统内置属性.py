
####################################### 类内部方法 #########################################
class Pig:
    pass
    # __slots__ = ["name"]
        
class Pig1(Pig):
    pass

# --- __name__ 返回类的名称
print(Pig.__name__,"__name__")

# --- __class__ 返回对象的构造器
# 
print(Pig.__class__,"__class__")

# --- __dict__ 储存类 和 实例的所有 属性和方法 储存在一个字典当中包括 内置方法和属性
# 类的__dict__是只读的，不可改变
# 实例的__dict__ 是可以改变的 
# 
print(Pig.__dict__,"__dict__")

# --- 用__bases__ 查看这个类的所有基类，返回一个元组
# 
print(Pig.__bases__,"基类")
print(Pig1.__bases__,"基类")
print(Pig1.__class__,"构造器")

# --- class.__slots__方法可以限制此类,实例化的对象 添加属性
#     他会导致实例的__dict__方法失灵
#    规定从这个类实例化的对象 可以添加的属性
#    如果对象添加了限制之外的属性则会报错
#    以列表的方式进行添加无限制的实例对象属性

# __base__ 返回父类的名称
print(Pig.__base__,"__base__")

# __doc__ 返回当前类的文档描述
print(Pig.__doc__,"__doc__")

# 
# __module__返回这个类所在的模块
print(Pig.__module__,"module")


#
###################################### 实例内部方法 ########################################
p = Pig()
p.name = "bruce"
# --- __class__ 返回对象的构造器
print(p.__class__,"__class__")

# --- __dict__ 储存类 和 实例的所有 属性和方法 储存在一个字典当中包括 内置方法和属性
# 类的__dict__是只读的，不可改变
# 实例的__dict__ 是可以改变的 
print(p.__dict__,"__dict__")

# __base__ 返回基类的名称
print(Pig.__base__,"__base__")

####################################### 模块内部方法 ########################################
#
# --- __all__可以指定 跨模块访问这个模块里面的各种类型变量 和 函数
# 
__all__ = ["__name"]
__name = "bruce"
age = 18
# --- __file__ 返回当前的模块名称
print(__file__)