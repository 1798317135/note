
# --- 1.0 对象方法是描述对象的行为动作（吃饭，玩，睡觉，学习）
#
# --- 2.0 方法跟函数定义差不多 
# 
# --- 3.0 所有类型的方法是储存在类里面的__dict__字典里面的，而不是实例化的对象里面
#         key 保存的是方法名 val 保存的是方法的类型 和保存在内存里面的地址
#         'obj': <function Dog.obj at 0x02AFB390>, 这个Dog类实例化的对象方法
#          'cm': <classmethod object at 0x00F6DBF0>, 这个是类方法
#           'sm': <staticmethod object at 0x00F6DC50>   这个是静态方法
# --- 4.0 对象分为两种 一种是 容器对象 和 非容器对象
#          --- 容器储存的是其他对象的引用 并不是其他对象本身
#              比如（列表，元组，字典，集合 类 实例 ，等等 可以储存其他对象引用的对象 叫做容器对象）
#          --- 非容器对象 不可以储存其他对象的引用，
#               他储存的是 python 预先缓存里面的 数字 或者短小等等
#              比如说 int str 等等        

class Dog:
# ***********************************  实例方法 **************************
# --- 实例方法就是 类实例化出的对象方法
#     1.0 实例方法的首个参数，是一个实例也就调用者本身
#         实例方法并且必须要设置至少一个形参 
#         规范给第一个形参用self
#         
#     2.0 实例方法调用有三种方法 
#     ---  2.1 们通常使用 obj.fun([obj],...)
#               用实例去调用这个方法 ，系统会自动设置第一个参数也就是调用者本身
#               我们只需设置其他参数即可,
#          2.2 剩下的两种调用实例方法，是根据类来找到这个方法当函数使用，所以通常用第一种调用
#               Class.fun()
#               或者把获取的这个方法直接赋值给一个变量
#               heh = Class.fun
#               heh()
#          
#     
    def obj(self,*args):
        print("这是一个实例方法",self,*args)
        
# **********************************  类方法 ******************************
# --- 类方法 
#     1.0 类方法的首个参数，必须是一个类
    @classmethod
    def cm(cls):
        print("这是一个类方法",cls)
# 
# *********************************静态方法 ******************************
# --- 静态方法
#     1.0 静态方法并没有参数的限制
    @staticmethod
    def sm():
        print("这是一个静态方法")
# 
# hei = Dog()
# print("这是一个对象(实例)",hei)
# # hei.obj()
# # hei.cm()
# # hei.sm()

# --- 所有类型的方法都是储存在类的__dict__字典里面
# 
# print(Dog.__dict__)
# print(hei.__dict__)
# 
# --- 调用实例方法
huang = Dog()
huang.obj("aa",11)
print(huang)

# Dog.obj("aa",11)
# aa = Dog.obj
# aa("aa",122)

# ********************************* 注意 ********************************
        