
#################################  模块 ###################################
#
# 1.0 模块的本质是一个py 类型的文件
# 2.0 为了使代码更容易 维护 和 复用
#     我们将具有相关功能的 对象单独写入到 一个py文件里面
#     
# 3.0 其他文件 可以用 import 导入这个文件
# 
# 4.0 我们将这个.py文件称为一个模块
# 
# 
#
################################包  #####################################
#
# 1.0 一个有层次的目录 结构，里面有多个 模块 或者 子包组成
# 2.0 必须 有 __init__.py这个文件的目录 才是 包
# 3.0 把一些 相关的文件 同意放到一个目录里面，并且有固定的__init__.py这个文件的目录
#      就是 包


################################# 导入模块 ####################

# --- 1.0 导入模块用 import 模块1,模块2
#       多个模块用逗号隔开
#     
# --- 2.0 如果想导入包里面的模块 ,
#       可以用点语法进行 定位
#       比如 a 包 里面的 b 模块
#       import a.b
#     
# --- 3.0 如果我们只导入一个包的话，系统不会导入包里面的模块
#     系统会导入 __init__.py
#      我们可以在__init__.py里面在导入指定的模块
#      这样我们直接导入包 就可以访问 __init__.py里面导入模块的内容
import 自定义模块
print(自定义模块.m1.age)

############################## 给导入模块 起一个别名 #############
#
# 1.0 如果导入的模块 路径过长，我们可以给用 as 给前面导入的路径 同意命名
#     我们使用这个模块的内容的时候，直接可以用这个别名，来调用
#     
import 自定义模块.m3 as m3

print(m3.age)
print(m3.age)

# # 2.0 还有个小敲门，给导入的多个 模块起一个别名
# #     这样我们可以在上下问的命名空间内调用相应 模块的内容
# #     如果后面的没有前面的命名空间的属性 则不会覆盖
# #     可以在后面 调用前面 有的属性
# # 
import 自定义模块.m2 as m3

print(m3.age)
print(m3.name)

######################################## from a import b [as c]#######################################
#
# 1.0 如果我们只想使用，模块里面的一部分功能 我们可以使用 from 模块 import 导入 这个方法 或者 功能
# 2.0 也可以给导入这个模块 的部分功能 ，用 as 重命名
# 3.0 注意要把前面的所有路径定位 都用from 引用
#      然后 后面可以使用的模块 才可以用 import 进行导入
#       也就是说后面的 improt 越简单越好
#   

from 自定义模块 import m2

print(m2.name)

######################################## from a import * #######################################

# --- *号 可以导入所有没有下划线的 模块 或者 模块里面的公有属性、变量、和 方法
#       注意是公有 ，私有的和受保护的 用 *号 是不可以导入的
#       这个 *号是不推荐使用的 ，导入的变量 可能覆盖掉，这个模块，上面已经声明的变量
#        
# --- __all__ =  [] 如果可以规定可以导入  模块，或者 模块里面的 手属性，变量和方法，
#       把可以使用的 用字符串写入 列表
#       
#     在 包的 __init__.py 文件中指定 可以规定外界可以使用 模块，
#     在 模块 __init__.py 中指定 可以规定外界可以使用的 方法 和 变量
#

