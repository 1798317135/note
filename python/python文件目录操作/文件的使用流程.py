
################################# 文件的使用流程 ##################################
#
#
# ****************************  1.0 打开文件  *************************
#         打开文件相当于给文件添加一个管道，也称为文件句柄
#         这个管道也分为好几种
#         单向管道  只能读 不能写 或者只能写不能读
#         双向管道 可以读 也可以写
#   
#         --- open(file,mode...) 会返回一个 文件对象 也是一个迭代器
#             file (打开的文件路径) 
#             mode (r ，w ， a) 
#                  ---r  （默认）是代表只读  不能写
#                         文件的指针会放到 文件的开头
#                         如果不存在则会报错
#                         读取的是一个str类型的值
#                         
#                  ---w   代表只写 不能读
#                         文件指针将会放到文件的开头
#                         写入的新内容会覆盖旧的内容
#                         如果文件不存在则会自动创建一个文件
#                  
#                  ---a   和 w 基本一样 不能读
#                         区别是文件的指针会放到文件的结尾
#                         所以写入的内容 追加到文件的后面 不会覆盖以前的内容
#                         如果文件不存在则会自动创建一个文件
#                         
#                  --- rb ，wb ，ab 代表操作二进制文件的读写 rb读取的是一个bytes 类型
#                  
#                       -----------------------------------------------------------
#                       
#                  --- r+ ,w+ , a+ , rb+ ,wb+ ,ab+ 代表已读写模式进行打开 b
#                       
#                       r+ 和 r 的区别是 ：
#                       1.0  r+ 不仅可以读取 也可以写入
#                       2.0 如果没有 read() 直接写 那么文件的指针会指向文件开头
#                       3.0 写入的文件会覆盖文件原内容从开头到和写入文件字符一样多的位置 
#                           剩余的部分不会被覆盖
#                       4.0 如果有读 read() 那么文件的指针会指文件的尾部
#                           写入的内容会追加到原内容的后面 并不会覆盖原内容
#                           
#                       -----------------------------------------------------------
#                       
#                       w+ 和 w的区别：
#                       1.0 w+ 可以读取 和写入都开启 不会报错
#                       2.0 w+ 在没有写入的情况下，读取会清空文件内容
#                              并且不会读取到任何值
#                       3.0 w+ 每次写入是 指针会指向文件开头，写入
#                              会覆盖原先的所用内容 从新写入
#                              
#                       -----------------------------------------------------------
#                       
#                       a+ 和 a的差别
#                       1.0 a+ 可以读取 和写入都开启 不会报错
#                       2.0 a+ 读取不到任何内容 只是可以开启 读取不会报错
#                       3.0 a+ 指针会指向文件的后面，所以写入内容会追加到原内容的后面
#                               并 不会覆盖
#                               
#                       ------------------------------------------------------------
#                       对于rb+如果打开的文件不存在 会报错(返回NULL)
#                       对于wb+ 如果文件不存在则会建立，如果文件存在 会覆盖
#                       对于ab+ 如果文件不存在则会建立 如果存在则会                        
                        
#                       rb+ 和 rb 的 区别
#                       1.0  rb+ 不仅可以读取 也可以写入
#                       2.0 如果没有 read() 直接写入 那么文件的指针会指向文件开头
#                       3.0 写入的文件会覆盖文件原内容从开头到和写入文件字符一样多的位置 
#                           剩余的部分不会被覆盖
#                       4.0 如果有读 read() 那么文件的指针会指文件的尾部
#                           写入的内容会追加到原内容的后面 并不会覆盖原内容
#                        
#                        
#                        -----------------------------------------------------------
#                       
#                       wb+ 和 wb的区别：
#                       1.0 wb+ 可以读取 和写入都开启 不会报错
#                       2.0 wb+ 在没有写入的情况下，读取会清空文件内容
#                              并且不会读取到任何值
#                       3.0 wb+ 每次写入是 指针会指向文件开头，写入
#                              会覆盖原先的所用内容 从新写入
#                              
#                       -----------------------------------------------------------
#                       
#                       ab+ 和ab的差别
#                       1.0 ab+ 可以读取 和写入都开启 不会报错
#                       2.0 ab+ 读取不到任何内容 只是可以开启 读取不会报错
#                       3.0 ab+ 指针会指向文件的后面，所以写入内容会追加到原内容的后面
#                               并 不会覆盖
#                               
#                       ------------------------------------------------------------
#                       
#                         
f = open("test/aa.txt","a")
# f = open("test/w.txt","w")
# f = open("test/c.txt","a")
# f = open("test/aa.txt","r+")
# f = open("test/w+.txt","w+")
# f = open("test/a+.txt","a+")


# # **********************************  2.0 读写文件  ****************************
# 
# # ------------ 1.0 定位 
# #                 把指针定位到文件的某个位置进行操作
#                   --- f.seek(offset[,whence]) 
#                       offset 偏移位 默认是指针指向文件开头位置
#                       whence 参照点 0，1，2
#                       0 代表从文件开始位置 开始偏移 偏移值只能是正数或者 0
#                       1 代表从文件当前的位置开始偏移 偏移值可以是正数，也可以是负数
#                       3 代表从文件的末尾位置开始偏移 偏移值必须是负数
#                       
#                       如果模式带b 也就是二进制的时候
#                       才可以使用 1 和 2
#                       如果不是二进制 那么就只能是默认的0 从文件的开始位置
#                       
#                   --- f.tell() 获取当前文件指针的位置
#                   
# print(f.tell(),"tell()")
# seek = f.seek(2)
# print(f.tell(),"tell()")
# 
# 
#----------------- 2.0 读取 
#
# ---  先判断文件是否可读 readable() 进行容错处理 减少程序报错
print(f.readable())
# #                   --- f.read([size]) 读取文件的字节数
# #                       如果没有参数 则读取文件指针后面的所有字节 并且读到哪里 就把指针移到哪里
# #                       那个参数是 要读取的字节数 

# conten = f.read()

# print(conten,"read()")

# print(f.tell(),"tell()") # 现在的指针就是4，读到哪里指针就移到哪里


#                   --- f.readline([size])按照行进行读取 每次读取一行
# content = f.readline()
# print(f.tell())
# print(content,"readline()")
# content = f.readline()
# print(f.tell())
# print(content,"readline()")
# content = f.readline()
# print(f.tell())
# print(content,"readline()")             
# f.readline()
# 
#                   --- f.readlines 
#                   把读取的数据 按照换行进行分割 然后返回一个分割后的列表
if f.readable():
    f.writable()
# print(result)
#                   --- for in 直接遍历f对象 或者遍历 f.readlines() 返回的列表
    for x in result:
        print(x)
#                   --- 注意！！ 如果文件比较庞大可以选择f.readline()或者 for in 遍历迭代器 
#                       每次读取一行 节约空间，但是性能比较低
#                       如果追求性能 就使用 read() 和 readlines()一次读取完毕
#                     
#---------------------- 3.0 写入
# 
# --- f.writable()先判断文件是否可以写入 进行容错处理 避免程序报错
if f.writable():
# --- write()返回写入字符的字节长度
#            写入到缓存区 
#            等到执行到close()的时候或者f.flush()然后才会把写入缓存区的内容
#            存放到到磁盘当中

    result = f.write("abc")
    print(result)
    
# --- flush()立即把缓存区的内容 写入到内存当中
    f.flush()

# # --- 3.0 关闭文件
        # --- close() 
        # 
        # 关闭文件 避免数据丢失
f.close()


# ******** 二进制文件的读取 rb ，wb ，ab *************
# 
#  我的电脑光卡
# 1.0 读取 img 文件夹里面的8.jpg  
# 
# --- 1.1 打开文件
# 
# file = open("img/12.jpg","rb")
# 
# # --- 1.2 读取文件
# 
# pic = file.read()
# print(pic)
# 
# # --- 1.3 关闭文件 
# 
# file.close()
# 
# # 2.0 写入到test文件夹 里面的pic.jpg里面

# # --- 2.0 打开文件
# tof = open("test/pic1.jpg","wb")
# # --- 2.2 写入文件
# 
# tof.write(pic)
# 
# # --- 2.3 关闭文件
# 
# tof.close() 

#################################### with as 语句 ##########################
#
with open("img/12.jpg","rb",) as x:
    content = x.read(20)
    print(content)
# --- file.fileno() 返回一个整形的文件描述 
    print(x.fileno())
# --- file.isatty() 如果连接一个终端返回true
    print(x.isatty())