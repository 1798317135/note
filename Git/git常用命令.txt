---git 两大特点
    1.0 版本控制
    2.0 集中式

###################### 基础 #####################

****** 三种种状态
    
    已提交(committed)
    表示数据已经安全的保存本地数据库

    已修改(modified)
    已经修改了文件，但是没有保存到数据库中

    已暂存(staged)
    一个已修改的文件的当前版本做了标记，使之包含在下次的提交快照当中

--- 由此引出了Git的三个工作区域的概念:

    --- Git仓库(git directory)
    --- 工作区(Working directory)
    --- 暂存区域(Staging Area)

--- 工作目录下的文件无非就是，以跟踪状态(tracked)
    或者未跟踪状态(Untracked)
    已经跟踪的说明已经被纳入了版本控制，
    在上一次的快照中由他们的记录，在工作一段事件后
    会处于未修改状态(Unmodfied),已修改(modfied)或
    放入暂存区(staged)

################## 基本命令 #########################

创建版本库 
    git init 
git add xxx  
    1.0 跟踪文件 
    2.0 提交到暂存区

删除文件
    1.0 删除工作区得文件
    rm 文件
    这个时候可以撤销删除 checkout
    git rm 文件
    然后提交删除
    2.0 删除暂存区得文件

    git rm -r --cached . 　　//不删除本地文件
    git rm -r --f . 　　//删除本地文件  

提交到版本库
    git commint -m '版本说明'

    git commit --amend 从新提交

查看版本
    git log 查看版本记录
         -p 查看每次提交得差异 -2 时查最近两条
         --stat 查看简略信息
         --graph --pretty=oneline 
         每一行显示一个格式化输出并由分支说明
         
查看操作记录 
    git reflog

版本回退
    git reset --hart HEAD~第几个版本
    git reset --hart 回退得版本序列号

撤销修改 
    直接丢弃工作区得改动
    git checkout -- 撤销文件 他可以取消上次工作区得修改

    暂存区得撤销
    git reset HEAD 撤销文件 他可以取消暂存

    版本库得撤销
    直接回退版本库


对比文件得不同
 +++ 代表增加
 --- 代表减少

 1.0 对比工作区和版本库得文件
    git diff HEAD -- 文件

 2.0 对比两个版本得文件HEAD 代表当前版本 
    git diff HEAD HEAD~第几个版本 -- 文件

 3.0 如果最后一次版本已提交，工作其的文件未改动的时候，比对的是最近一次的版本比对 最近一次的上一个版本的比对
    git diff HEAD~1  -- 文件 

 4.0 如果最后一个版本已提交，工作器的文件发生了改变，比对的是工作区的和最近提交版本的修改
    git diff HEAD -- 文件



################ 分支
主分支 master 默认

添加分支 就是 把默认得时间线 HEAD指向 创建得分支
然后 当我们这个分支完成后 再把这个分支合并到主分支
master 上 然后可以选择删除 这个分支 留一个主分支

查看分支
git branch

创建分支
git branch 分支名
这个创建得分支 拥有以前分支得HEAD版本节点
但是以后增加得只在这个新分支上增加


切换分支
git checkout 分支名


创建加切换分支
git checkout -b 分支名


快速合并 相当于把某分支支指针直接移动到被合并分支哪里
有时又并不支持这种快速合并
git merge 分支 把这个分支合并到当前分支

通常我们需要禁用快速合并 来记录合并，
git merge 分支 --no-ff -m '记录这次的合并信息'  

当两个分支同时修改了同一个文件 并且提交了新的HADE节点
这个是合并是不会直接成功得 ，我们需要手动得结合这连个分支修改得同意文件
然后 从新提交 并且记录

还有一种情况，当两个分支一个新建了文件 一个修改了文件
这时合并时并不会使用快速合并 ，他自动合并 之后 然后注释 然后自动提交

删除分支和查看远程分支
git branch -d 分支名

git branch -a 查看所有的本地分支和远程分支

git branch --delete 分支名字 删除远程分支

git branch -vv 查看本地分支和跟踪的远程分支 和 最近提交的信息

当我们还没有完成得工作区 这个时候需要修复bug 我们可以把没有完成得工作区保护起来 
等到修复了bug之后再来 恢复工作区 继续工作，修复bug 通常需要建立一个临时得分支 等到修复完成合并之后删除
这个临时得修复bug得分支 并且不要用快速合并 不然不能查看 合并记录

git stash 保护工作区

git stash list 可以查看全部得保护区

git stash pop 恢复保护区到原来得工作状态 


############## git服务器
我们需要一个git服务器来让多个客户端共同管理
这个项目




git 得服务器可以自己搭建
也可以使用github 网站 来担任这个功能


通常就是这样
git branch --set


############### github 

创建仓库

然后如果想要跟这个仓库进行交互
就需要把电脑得ssh 公钥 放到github上面

git remote  查看远程仓库
        -v  查看远程仓库和获取和推送的地址    

git remote add <shortname> <url> 添加一个新的远程 Git 仓库

git fetch shortname 直接拉去添加得远程仓库 它并不会自动合并或修改你当前的工作

git clone 地址这个地址可以用ssh协议得地址  可以把服务器上的代码克隆一份 拿下来操作
如果可控出错 执行eval "$*(ssh-agent -s)"
                ssh-add

把代码clone 下来之后我们 就可以新建一个分支对他进行 开发
每次提交得内容 保存在本地得git仓库
等到开发完成我们可以把这个 项目 从本地仓库推送到 远程服务器
git push origin 和要推送得分支 


我们在开发得时候 把本地的分支跟踪远程得分支
这样我们可以知道 本地分支和远程分支是否保持一致
如果本地得分支快于远程的分支 我们就可以直接推送上去 不用在指定推送得分支
git branch --set-upsteam-to=要跟踪得分支 本地得跟踪得分支


这个时候我们可以把 远程得分支拉拉下来 并且自动于本地分支合并
git pull orgin 分支名称





##################################### 错误解决

warning: LF will be replaced by CRLF in xxxxx

The file will have its original line endings in your working directory.

这个因为git 默认的是将换行回车替换为 CRLF
    解决：
    git config --global core.autocrlf false
    true 自动完成标准化与转换
    input 只做标准化操作，不做转换操作
    false 提交与检出的代码都保持文件原有的换行符不变

    windows 一般为 true
    liunx 一般为 input



Git diff ^M的消除
    这个就是因为比较文件换行符的差异造成的
    我们可以按照上一个问题的解决思路来设置一下即可


解决中文文件夹 乱码
git config --global core.quotepath false


